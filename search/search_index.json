{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Documentation for pynxtools-raman","text":"<p>pynxtools-raman is a free, and open-source data software for harmonizing Raman spectroscopy data and metadata for research data management using NeXus, implemented with the goal to make scientific research data FAIR (findable, accessible, interoperable and reusable).</p> <p>pynxtools-raman, which is a plugin for pynxtools, provides a tool for reading data from proprietary and open data formats from technology partners and the wider Raman community  (currently: <code>WITec</code> or <code>ROD</code>)  and standardizing it such that it is compliant with the NeXus application definitions <code>NXoptical_spectroscopy</code> and <code>NXraman</code>, which is an extension of <code>NXoptical_spectroscopy</code>. pynxtools-raman is developed both as a standalone reader and as a tool within NOMAD, which is the open-source data management platform for materials science we are developing with FAIRmat.</p> <p>pynxtools-raman solves the challenge of using heterogeneous and unfindable data formats which is common in the field of Raman spectroscopy.</p> <p>pynxtools-raman is useful for scientists from the Raman spectroscopy community that deal with heterogeneous data, for technology partners and data providers looking for ways to make their data FAIRer, and for research groups that want to organize their data using NeXus and NOMAD.</p> <p>A current use case can be found here with an example NeXus file here.</p> Project and community <p>Any questions or suggestions? Get in touch!</p>"},{"location":"index.html#tutorials","title":"Tutorials","text":"<ul> <li>Config file and customized data conversion</li> </ul>"},{"location":"index.html#how-to-guides","title":"How-to guides","text":"<ul> <li>Installation</li> <li>Convert data to NeXus files</li> <li>Download Raman Open Database files</li> </ul>"},{"location":"index.html#learn","title":"Learn","text":"<ul> <li>You may want to take a look at general concepts of NeXus and how pynxtools works in the documentation of pynxtools</li> </ul>"},{"location":"index.html#references","title":"References","text":"<p>Current examples of implementations are: </p> <ul> <li>WITEC Alpha</li> <li>Raman Open Database</li> </ul>"},{"location":"how-tos/convert_data.html","title":"Convert Data to NeXus files","text":"<p>for the WITec dataset via: <pre><code>dataconverter examples/witec/txt/eln_data.yaml examples/witec/txt/Si-wafer-Raman-Spectrum-1.txt src/pynxtools_raman/config/config_file_witec.json --reader raman --nxdl NXraman --output new_witec_example_neuxs.nxs\n</code></pre></p> <p>and for the Raman Open Database dataset set via: <pre><code>dataconverter examples/database/rod/rod_file_1000679.rod src/pynxtools_raman/config/config_file_rod.json --reader raman --nxdl NXraman --output new_rod_example_neuxs.nxs\n</code></pre></p> <p>Explanation for the Raman Open Database commands:</p> <ul> <li>You assign the reader name via <code>--reader raman</code>.</li> <li>You assign the NeXus application definition, on which the output will be based via <code>--nxdl NXraman</code>.</li> <li>You specify the name and path of the output file via <code>--output new_rod_example_neuxs.nxs</code>.</li> <li>You assign an individualized config file via <code>src/pynxtools_raman/config/config_file_rod.json</code>. The config file is detected by its extension <code>.json</code>.</li> <li>You give the file which includes the meta and measurement data via <code>examples/database/rod/rod_file_1000679.rod</code>. The parser is specified to detect the <code>.rod</code> file, and handle the content appropriately.</li> </ul> <p>Then you can inspect the generated file at this website or in VScode via the extension <code>H5web</code>.</p>"},{"location":"how-tos/download_rod.html","title":"Downloading ROD files","text":"<p>This how-to shows how to download single or multiple files from the Raman Open Database.</p>"},{"location":"how-tos/download_rod.html#download-of-individual-rod-files","title":"Download of individual ROD files","text":"<p>If you have installed pynxtools-raman you can add a new command to download <code>.rod files</code>. For example, you can download a rod file with the ID <code>1000679</code> via: <pre><code>download_rod_file 1000679\n</code></pre></p>"},{"location":"how-tos/download_rod.html#download-of-multiple-rod-files","title":"Download of multiple ROD files","text":"<p>Adjust the file <code>download_rods_script.sh</code>to the range of download you want. Default start is <code>1</code> and default end is <code>3</code>. Please, do not trigger unnecessary multiple amounts of downloads.</p> <p>Take a look here, to get valid .rod IDs. The list of .rod IDs can be accessed here.</p> <p>Make the bash script executable</p> <pre><code>chmod +x download_rods_script.sh\n</code></pre> <p>and execute the script</p> <pre><code>./src/download_rod_files/download_rods_script.sh\n</code></pre>"},{"location":"how-tos/download_rod.html#download-of-all-rod-files","title":"Download of all ROD files","text":"<p>Take a look at the file: <code>download_all_rod_files_script.sh</code></p>"},{"location":"how-tos/installation.html","title":"Installation of pynxtools","text":"<p>Latest Release Version</p> <p>You can install the latest release version by:</p> <pre><code>pip install pynxtools[raman]\n</code></pre> <p>As pynxtools-raman is a plugin of pynxtools, pynxtools itself will as well be installed.</p> <p>Latest Development Version</p> <p>Download the repository via git clone: <pre><code>git clone https://github.com/FAIRmat-NFDI/pynxtools-raman.git\n</code></pre> Switch to the project root folder: <pre><code>cd pynxtools-raman\n</code></pre> You see three Folders: - examples: contains example datasets to show how the data conversion is done (currently one example from WITec and one example from the Raman Open Database) - tests: contains a test procedure and files, which are required for software development - src/pynxtools_raman: source files, which contain the sub-reader function for Raman experiments. This only works in combination with the Python package <code>pynxtools</code>. <code>pynxtools-raman</code> has a reader reader plugin for <code>pynxtools</code>, which is a specialization of the Multiformat Reader. There are as well sub-reader functions for a WITec device and files from the Raman Open Database. In addition, default config.json files are located in src/pynxtools_raman/config. These are necessary to map the input data via the Multiformat Reader to the NeXus concepts. These config files allow individual adjustments, as different laboratories may have different electronic lab notebook structures. You can find more information about the config file here.</p> <p>Consider setting up an invididual python environment, to seperate the python functionalities of this package from the python functionalities of your operating system:</p> <p>For Ubuntu-based systems: <pre><code>python -m venv .pyenv\nsource .pyenv/bin/activate\n</code></pre> Verify its location via: <pre><code>which python\n</code></pre> It should point to the python folder, you created above with the name <code>.pyenv</code>.</p> <p>Install the python package: <pre><code>pip install .\n</code></pre></p> <p>You then can check if pynxtools-raman is installed via: <pre><code>pip list\n</code></pre></p>"},{"location":"reference/rod.html","title":"ROD","text":"<p>This shows two examples in which <code>.rod</code> files from the Raman Open Database (ROD) are converted to NeXus <code>.nxs</code> files.</p>"},{"location":"reference/rod.html#convert-example-data","title":"Convert example data","text":"<ul> <li>Clone the GitHub repository and install the latest development version</li> <li>Go into the root folder of this repository (default <code>pynxtools-raman</code>)</li> <li>Copy and paste:     <pre><code>dataconverter examples/database/rod/rod_file_1000679.rod src/pynxtools_raman/config/config_file_rod.json --reader raman --nxdl NXraman --output examples/database/rod/rod_example_neuxs.nxs\n</code></pre></li> <li>Inspect the created NeXus file. Some warnings may be present.</li> </ul>"},{"location":"reference/rod.html#convert-downloaded-rod-files","title":"Convert downloaded ROD files","text":"<p>Convert single file</p> <p>Using the pynxtools dataconverter with the pynxtools-raman reader plugin:</p> <pre><code>dataconverter &lt;PATH_TO&gt;/1000679.rod src/pynxtools_raman/config/config_file_rod.json --reader raman --nxdl NXraman --output rod_example_nexus.nxs\n</code></pre> <p>Convert multiple files</p> <p>Take a look at the bash script and make it executable: <code>chmod +x convert_all_rod_to_nxs.sh</code>.</p> <p>Call the script <code>./src/download_rod_files/convert_all_rod_to_nxs.sh</code>.</p>"},{"location":"reference/witec.html","title":"WITec","text":"<p>This is an example dataset to convert a .txt file (exported ASCII file, Si-wafer-Raman-Spectrum-1.txt) with the addition of a ELN data file (eln_data.yaml) to a NeXus file.</p>"},{"location":"reference/witec.html#convert-example-data","title":"Convert example data","text":"<ul> <li>Go into the root folder of this repository (default \"pynxtools-raman\")</li> <li>Copy and paste:     <pre><code>dataconverter examples/witec/txt/eln_data.yaml examples/witec/txt/Si-wafer-Raman-Spectrum-1.txt src/pynxtools_raman/config/config_file_witec.json --reader raman --nxdl NXraman --output examples/witec/txt/witec_example_neuxs.nxs\n</code></pre></li> <li>A new file should be created at <code>examples/witec/txt/witec_example_neuxs.nxs</code>.</li> </ul>"},{"location":"tutorial/adjust_config_file.html","title":"Config file and customized data conversion","text":"<p>The <code>pynxtools-raman</code> package enables the dataconversion from experimental data to a NeXus file whereby the NXraman application definition is used. The dataconverter of <code>pynxtools-raman</code> is based on the <code>MultiformatReader</code> from the <code>pynxtools</code> package. This allows using JSON config files to map pre-structured experimental data to NeXus concepts. You can learn more about the <code>MultiFormatReader</code> in the documentation of the <code>pynxtools</code> package (here and here.</p>"},{"location":"tutorial/adjust_config_file.html#how-does-the-pre-structured-experimental-data-look-like","title":"How does the pre-structured experimental data look like?","text":"<p>Human-readable structured text formats are used for this. Examples are <code>.yaml</code>or <code>.json</code>. This looks like that:</p> <pre><code>data:\n  unit_x: nm\n  unit_y: counts\n  longname_x: Wavelength\n  longname_y: Raman Intensity\n  longname_x_raman: Raman Shift\ninstrument:\n  scattering_configuration: z(xx)-z\n  beam_incident:\n    wavelength:\n      value: 532.1\n      unit: nm\n    average_power:\n      value: 60\n      unit: mW\n</code></pre> <p>This file is called <code>eln_data.yaml</code>and can be found here. This is an example for a WITec Raman spectrometer. If you want to use <code>pynxtools-raman</code>, you need a small programm or script to parse your own experimental output data to such a pre-structured format.</p>"},{"location":"tutorial/adjust_config_file.html#what-else-is-required-for-the-data-conversion","title":"What else is required for the data conversion?","text":"<p>Lets take a look at the command, to convert the data for the WITec instrument:</p> <pre><code>dataconverter examples/witec/txt/eln_data.yaml examples/witec/txt/Si-wafer-Raman-Spectrum-1.txt src/pynxtools_raman/config/config_file_witec.json --reader raman --nxdl NXraman --output examples/witec/txt/witec_example_nexus.nxs\n</code></pre> <p>The indiviual commands are explained here.</p> <p>Aside from telling the program which NeXus definition you want to use (<code>NXraman</code>) and what reader for the dataconverion to use (<code>raman</code>), you have to:</p> <ul> <li>Define the name of the output file (<code>witec_example_neuxs.nxs</code>)</li> <li>Provide Raman spectra (<code>examples/witec/txt/Si-wafer-Raman-Spectrum-1.txt</code>)</li> <li>Provide the config file (<code>config_file_witec.json</code>)</li> </ul> <p>While the first two files are rather trivial and just definitions or given by the setup output, the config file is important to tell the program what to do.</p>"},{"location":"tutorial/adjust_config_file.html#what-is-the-config-file-good-for","title":"What is the config file good for?","text":"<p>The config file tells the dataconverter to map the information of your data file and the <code>eln_data.yaml</code> file to NeXus concepts. This connects your individual experimental data to generalized FAIR-enabling NeXus concepts. In this way, other experimentalists or even machines can pick up the information you provided, and understand exactly, that the information you providedis indeed the excitation wavelength of the beam, which is incident on the sample. It is not the laser, which is used for second-harmonic generation. This description of mapping is essential for FAIR data processing. You have to set this up. This is what the config file is good for.</p>"},{"location":"tutorial/adjust_config_file.html#structure-of-config-file","title":"Structure of config file","text":"<p>This is how a config file looks like:</p> <pre><code>{\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/scattering_configuration\": \"@eln\",\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\": \"@eln\",\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength/@units\": \"@eln\",\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/parameter_reliability\": \"@eln\",\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/average_power\": \"@eln\",\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/average_power/@units\": \"@eln\",\n  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/associated_source\": \"@eln\",\n  \"/ENTRY[entry]/DATA[data]/y_values/@units\": \"@eln:/ENTRY[entry]/data/unit_y\",\n  \"/ENTRY[entry]/DATA[data]/x_values/@units\": \"@eln:/ENTRY[entry]/data/unit_x\",\n  \"/ENTRY[entry]/DATA[data]/y_values/@long_name\": \"@eln:/ENTRY[entry]/data/longname_y\",\n  \"/ENTRY[entry]/DATA[data]/x_values/@long_name\": \"@eln:/ENTRY[entry]/data/longname_x\",\n  \"/ENTRY[entry]/DATA[data]/x_values_raman/@long_name\": \"@eln:/ENTRY[entry]/data/longname_x_raman\",\n  \"/ENTRY[entry]/DATA[data]/x_values_raman\": \"@data:data/x_values_raman\",\n  \"/ENTRY[entry]/DATA[data]/x_values_raman/@units\": \"1/cm\"\n  }\n</code></pre> <p>The general structure of the config file is therefore:</p> <pre><code>{\n    \"key1\":\"value1\",\n    \"key2\":\"value2\"\n  }\n</code></pre> <p>You can find more information of the config file in the pynxtools documentation for the multiformat reader.</p>"},{"location":"tutorial/adjust_config_file.html#key-structure","title":"Key Structure","text":"<p>The <code>key</code> has the structure of a NeXus concept path. This means that for:</p> <p><pre><code>\"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\"\n</code></pre> in the NeXus file, the group with the name <code>entry</code> is created. This group is given the attribute <code>NXclass=NXentry</code>due to the uppercase <code>ENTRY</code>.</p> <p>Inside the group <code>entry</code>, the group with the name <code>instrument</code> is created. This group is given the attribute <code>NXclass=NXinstrument</code> due to the uppercase <code>INSTRUMENT</code>.</p> <p>Inside the group <code>instrument</code>, the group with the name <code>beam_incident</code> is created. As the input of the used NeXus definition is given as well (in this case, <code>NXraman</code>), the dataconvert infers that you refer to <code>beam_incident</code> in <code>INSTRUMENT</code>, as shown in <code>NXraman</code>. Therefore, the group is given the attribute <code>NXclass=NXbeam</code>.</p> <p>Inside the group <code>beam_incident</code>, the field with the name <code>wavelength</code> is created.</p> <p>Overall, the key represents a combination of a NeXus concept path with an uppercase notation, to assign the invididual group entries specific NeXus classes.</p>"},{"location":"tutorial/adjust_config_file.html#value-structure","title":"Value Structure","text":"<p>The <code>value</code>has the structure:</p> <pre><code>@&lt;PREFIX&gt;:&lt;PATH&gt;\n</code></pre> <p><code>@&lt;PREFIX&gt;</code> can be <code>@eln</code>, <code>@data</code>or it can be empty.</p> <p>For example, <code>@eln:X</code> calls the function <code>get_eln_data</code>in the <code>reader.py</code> of <code>pynxtools-raman</code> (see here).</p> <p>Similarly, <code>@data:X</code> calls the function <code>get_data</code> in the <code>reader.py</code> of <code>pynxtools-raman</code> (see here).</p> <p>If no prefix is given, i.e. just <code>X</code>, assigns the value <code>X</code> is assigned to the given NeXus concept path (without a special function to process the data).</p>"},{"location":"tutorial/adjust_config_file.html#example-of-data-mapping-via-config-file","title":"Example of data mapping via config file","text":"<p>Given is the <code>key:value</code> pair:</p> <pre><code>  {\n  \"/ENTRY[entry]/DATA[data]/y_values/@units\":\"@eln:/ENTRY[entry]/data/unit_y\",\n  }\n</code></pre> <p>The value is <code>\"@eln:/ENTRY[entry]/data/unit_y\"</code>. Therefore, the <code>@eln</code> function gets the input <code>/ENTRY[entry]/data/unit_y</code>. This tells the dataconverter, to look for the <code>key = data/unit_y</code> in the <code>eln_data.yaml</code> file. The respective output is <code>counts</code>. So, the NeXus concept <code>entry/data/y_values/@units</code> will be assigned the string value <code>counts</code>. The <code>@</code> in <code>@units</code> indicates, that the attribute (called <code>units</code>) is assigned to the field <code>y_values</code>. <code>y_values</code> itself is part of the group with name <code>data</code> and with the NeXus concept class <code>NXdata</code>. The <code>NXdata</code> group itself, is inside the <code>NXentry</code> group.</p> <p>Why are there different functions?</p> <p>The reason is, that the values sometimes require different processing steps. Here, for example, the values for <code>@eln</code> come from the <code>eln_data.yaml</code> file, while the values for <code>@data</code> originate from the <code>Si-wafer-Raman-Spectrum-1.txt</code> file.</p> <p>Why is for sometimes only the <code>@&lt;PREFIX&gt;</code> given, but no <code>&lt;PATH&gt;</code>?</p> <p>This is a shorter notation, to ease the writing of the config file. For example, the <code>key:value</code> pair: <pre><code>  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\": \"@eln\"\n</code></pre> refers to directly to NeXus concept entry, as the <code>eln_data.yaml</code> is structured similar to the NeXus concept (i.e., it has the same keys as the config files). The equivalent notation is: </p> <p><pre><code>  \"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\": \"@eln:entry/instrument/beam_incident/wavelength\"\n</code></pre> i.e., the data converter removes the <code>uppercase</code> symbols and the brackets <code>[]</code> from the key. This output then becomes the <code>&lt;PATH&gt;</code> in <code>@&lt;PREFIX&gt;:&lt;PATH&gt;</code> (the value in the <code>key:value</code> pair). In this way, the <code>@eln</code> function just performs a path transformation.</p>"},{"location":"tutorial/adjust_config_file.html#examples-for-adjusting-the-config-file","title":"Examples for adjusting the config file","text":"<ol> <li> <p>You remove <code>\"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\": \"@eln\"</code> from the config file, but keep the respective entry in the <code>eln_data.yaml</code> file: The <code>wavelength</code> value will not be written into the output NeXus file. Similarly, if your config file is empty, no entry will be generated at all. Even if your <code>eln_data.yaml</code> file is full of entries.</p> </li> <li> <p>You keep <code>\"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\": \"@eln\"</code> from the config file, but remove the respective entry in the <code>eln_data.yaml</code> file: No value will be assigned and the NeXus entry will not be in the output nexus file. Though, a warning will be invoked in the dataconversion (<code>WARNING: No key found</code>).</p> </li> <li> <p>You want to specify, that <code>beam_incident</code> is a <code>NXbeam</code> class: Replace <code>beam_incident</code> by <code>BEAM[beam_incident]</code></p> </li> <li> <p>The determination of the incident beam wavelength is incorrect, as the device has malfunctioned. But you know the correct value, from earlier measurements (which is 532nm). So you always want that the same value appears in the NeXus file. In that case, you need to write<code>\"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength\":532</code>.</p> </li> <li> <p>You want to add the wavelength of the incident beam wavelength: Change <code>\"@eln\"</code> to <code>\"nm\"</code> for <code>\"/ENTRY[entry]/INSTRUMENT[instrument]/beam_incident/wavelength/@units\"</code>. If the value in the <code>eln_data.yaml</code> is still correctly processed, you can keep <code>\"@eln\"</code>.</p> </li> <li> <p>You want to have the NeXus <code>NXentry</code> not named <code>entry</code> but instead <code>measurement1</code>: Change all <code>/ENTRY[entry]</code> to <code>/ENTRY[measurement1]</code>. To avoid renaming all individual entries in the <code>.json</code> config file, you can also structure the file with nested dictionaries, as shown here for the <code>config_file.json</code>.</p> </li> </ol>"}]}